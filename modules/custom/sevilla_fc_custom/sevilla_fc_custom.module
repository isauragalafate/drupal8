<?php

/**
 * @file
 * Contains sevilla_fc_custom.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Block\BlockPluginInterface;

define('TAX_NEWS_CATEGORIES', 'news_categories');
define('TAX_TERM_FOUNDATION', 'Fundación');
define('TAX_TERM_LIVE', 'Directo');
define('TAX_TERM_CHRONICLE', 'Crónicas');
define('TAX_TERM_PREVIOUS', 'Previa');

/**
 * Implements hook_help().
 */
function sevilla_fc_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sevilla_fc_custom module.
    case 'help.page.sevilla_fc_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Sevilla FC Customization') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function sevilla_fc_custom_form_node_news_form_alter(&$form, &$form_state) {
  $foundation_term_id = _sevilla_fc_custom_get_term_id_by_name_and_taxonomy(TAX_TERM_FOUNDATION, TAX_NEWS_CATEGORIES);
  $chronicle_term_id = _sevilla_fc_custom_get_term_id_by_name_and_taxonomy(TAX_TERM_CHRONICLE, TAX_NEWS_CATEGORIES);
  $previous_term_id = _sevilla_fc_custom_get_term_id_by_name_and_taxonomy(TAX_TERM_PREVIOUS, TAX_NEWS_CATEGORIES);
  $live_term_id = _sevilla_fc_custom_get_term_id_by_name_and_taxonomy(TAX_TERM_LIVE, TAX_NEWS_CATEGORIES);

  // If foundation category is selected, show foundation category select.
  if ($foundation_term_id) {
    $form['field_foundation_category']['#states'] = [
      'visible' => [
        ':input[name="field_news_category"]' => ['value' => $foundation_term_id],
      ],
    ];
  }

  // Show chronicle texarea when the news category is chronicle, previous or live.
  if ($chronicle_term_id || $previous_term_id || $live_term_id) {
    $form['field_news_chronicle']['#states'] = [
      'visible' => [
        ':input[name="field_news_category"]' => [
          ['value' => $chronicle_term_id],
          ['value' => $previous_term_id],
          ['value' => $live_term_id],
        ],
      ],
    ];
  }

  // Show event select when the news category is chronicle, previous or live.
  if ($chronicle_term_id || $previous_term_id || $live_term_id) {
    $form['field_news_event']['#states'] = [
      'visible' => [
        ':input[name="field_news_category"]' => [
          ['value' => $chronicle_term_id],
          ['value' => $previous_term_id],
          ['value' => $live_term_id],
        ],
      ],
    ];
  }

  // Show Promoted Title input when promoted is checked.
  $form['field_news_promoted_title']['#states'] = [
    'visible' => [
      ':input[name="promote[value]"]' => ['checked' => TRUE],
    ],
  ];

  // Show Promoted Title input when promoted is checked.
  $form['field_news_promoted_image']['#states'] = [
    'visible' => [
      ':input[name="promote[value]"]' => ['checked' => TRUE],
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function sevilla_fc_custom_menu() {
  $items['sevilla_fc_custom/config'] = array(
    'title' => 'Sevilla FC Configuration',
    'route_name' => 'sevilla_fc_custom.settings',
  );

  return $items;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function sevilla_fc_custom_entity_extra_field_info() {
  $extra = array();

  // Add custom field to the Photo Gallery content type.
  $extra['node']['photo_gallery']['display']['photo_gallery_total_images'] = [
    'label' => t('Total images'),
    'description' => t('Total images of the nodes'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function sevilla_fc_custom_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Total of images that a photo gallery has.
  if ($display->getComponent('photo_gallery_total_images')) {
    $photo_gallery_total_images = $entity->field_photo_gallery_images->count();

    $build['photo_gallery_total_images'] = [
      '#type' => 'markup',
      '#markup' => '<span class="photo_gallery_total_images">' . $photo_gallery_total_images . " " . ($photo_gallery_total_images == 1 ? t('photo') : t('photos')). '</span>',
    ];
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
/*function sevilla_fc_custom_block_view_views_block_alter(array &$build, BlockPluginInterface $block) {
  // Add contextual links for those views block using entityqueue sorting.
  $build['#contextual_links']['menu'] = [
    'route_parameters' => ['menu' => 'views_block__news_news_home_promoted'],
  ];
  $build['#contextual_links']['entityqueue_sorting'] = [
    'route_parameters' => ['entityqueue_sorting' => 'views_block__news_news_home_promoted'],
  ];
  $build['#contextual_links']['entityqueue_sorting2'] = [
    'route_parameters' => ['entityqueue_sorting2' => 'views_block__news_news_home_promoted'],
  ];
  $build['#contextual_links']['entityqueue_sorting'] = [
    'route_parameters' => ['block' => 'views_block__news_news_home_promoted'],
  ];
  $build['#contextual_links']['block'] = [
    'route_parameters' => ['block' => 'views_block__news_news_home_promoted'],
  ];
  /*$base_block_id = $block->getDerivativeId();
  switch ($base_block_id) {
    case 'news-news_home_promoted':
      if (isset($build['#contextual_links'])) {
        $build['#contextual_links']['entityqueue_sorting'] = [
          'route_parameters' => ['entityqueue_sorting' => 'views_block__news_news_home_promoted'],
        ];
      }
      break;
    default: break;
  }*/
 // kint($build['#contextual_links']);
//}*/

/**
 * Get the term id by its name and the taxonomy name it belong to.
 *
 *  @param String $term_name
 *    Term name.
 *  @param String $term_taxonomy
 *    Taxonomy term name.
 *  @param Boolena $strval
 *    True if we need to get the value as string. Default as false return the
 *    int value.
 *
 *  @return mixed
 *     According to the strval it will be returned an int or string if the value
 *     exists otherwise FASLSE will be returned.
 */
function _sevilla_fc_custom_get_term_id_by_name_and_taxonomy ($term_name, $term_taxonomy, $strval = false) {
  $terms = taxonomy_term_load_multiple_by_name($term_name, $term_taxonomy);

  if (!empty($terms)) {
    $term_ids = array_keys($terms);
    if (isset($term_ids[0])) {
      $term_id = $term_ids[0];
      if ($strval) {
        return strval($term_id);
      }
      else {
        return $term_id;
      }
    }
  }

  return FALSE;
}